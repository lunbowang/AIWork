// Code generated by goctl. DO NOT EDIT.
package model

import (
	"ai/internal/domain"
	"context"
	"time"

	"go.mongodb.org/mongo-driver/mongo/options"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

type ApprovalModel interface {
	List(ctx context.Context, req *domain.ApprovalListReq) ([]*Approval, int64, error)
	Insert(ctx context.Context, data *Approval) error
	FindOne(ctx context.Context, id string) (*Approval, error)
	Update(ctx context.Context, data *Approval) error
	Delete(ctx context.Context, id string) error
}

type defaultApprovalModel struct {
	col *mongo.Collection
}

func NewApprovalModel(db *mongo.Database) ApprovalModel {
	col := db.Collection("approval")
	return &defaultApprovalModel{
		col: col,
	}
}

func (m *defaultApprovalModel) List(ctx context.Context, req *domain.ApprovalListReq) ([]*Approval, int64, error) {
	var (
		data []*Approval
		opt  = &options.FindOptions{
			Sort: bson.M{
				"createAt": -1,
			},
		}
		filter = bson.M{}
	)
	opt.Limit, opt.Skip = Pagination(req.Page, req.Count)

	switch ApprovalOptionType(req.Type) {
	case ApprovalSubmit:
		filter["userId"] = req.UserId
	case ApprovalAudit:
		filter["approvalId"] = req.UserId
	}

	if len(req.Id) != 0 {
		oid, err := primitive.ObjectIDFromHex(req.Id)
		if err != nil {
			return nil, 0, err
		}
		filter["_id"] = oid
	}

	err := entityList(ctx, m.col, filter, &data, opt)
	if err != nil {
		return nil, 0, err
	}

	count, err := m.col.CountDocuments(ctx, filter)
	if err != nil {
		return nil, 0, err
	}
	return data, count, nil
}

func (m *defaultApprovalModel) Insert(ctx context.Context, data *Approval) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
		data.CreateAt = time.Now().Unix()
		data.UpdateAt = time.Now().Unix()
	}

	_, err := m.col.InsertOne(ctx, data)
	return err
}

func (m *defaultApprovalModel) FindOne(ctx context.Context, id string) (*Approval, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, ErrInvalidObjectId
	}

	var data Approval
	err = m.col.FindOne(ctx, bson.M{"_id": oid}).Decode(&data)
	switch err {
	case nil:
		return &data, nil
	case mongo.ErrNoDocuments:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultApprovalModel) Update(ctx context.Context, data *Approval) error {
	data.UpdateAt = time.Now().Unix()
	_, err := m.col.UpdateOne(ctx, bson.M{"_id": data.ID}, bson.M{"$set": data})
	return err
}

func (m *defaultApprovalModel) Delete(ctx context.Context, id string) error {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return ErrInvalidObjectId
	}
	_, err = m.col.DeleteOne(ctx, bson.M{"_id": oid})
	return err
}
