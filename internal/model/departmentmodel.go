// Code generated by goctl. DO NOT EDIT.
package model

import (
	"ai/internal/domain"
	"ai/pkg/xerr"
	"context"
	"time"

	"go.mongodb.org/mongo-driver/mongo/options"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

type DepartmentModel interface {
	Insert(ctx context.Context, data *Department) error
	List(ctx context.Context, req *domain.DepartmentListReq) ([]*Department, error)
	ListToMap(ctx context.Context, req *domain.DepartmentListReq) (map[string]*Department,
		error)
	All(ctx context.Context) ([]*Department,
		error)
	AllToMap(ctx context.Context) (map[string]*Department,
		error)
	FindByName(ctx context.Context, name string) (*Department, error)
	FindOne(ctx context.Context, id string) (*Department, error)
	Update(ctx context.Context, data *Department) error
	Delete(ctx context.Context, id string) error
}

type defaultDepartmentModel struct {
	col *mongo.Collection
}

func NewDepartmentModel(db *mongo.Database) DepartmentModel {
	col := db.Collection("department")
	return &defaultDepartmentModel{
		col: col,
	}
}

func (m *defaultDepartmentModel) Insert(ctx context.Context, data *Department) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
		data.CreateAt = time.Now().Unix()
		data.UpdateAt = time.Now().Unix()
	}

	_, err := m.col.InsertOne(ctx, data)
	return err
}

func (m *defaultDepartmentModel) List(ctx context.Context, req *domain.DepartmentListReq) ([]*Department, error) {
	var (
		data   []*Department
		opt    = &options.FindOptions{}
		filter = bson.M{}
	)

	if len(req.DepIds) > 0 {
		oids := make([]primitive.ObjectID, 0)
		for _, id := range req.DepIds {
			oid, err := primitive.ObjectIDFromHex(id)
			if err != nil {
				return nil, xerr.WithMessagef(err, "primitive.ObjectIDFromHex err %v, id %v", err.Error(), id)
			}
			oids = append(oids, oid)
		}
		filter["_id"] = bson.M{
			"$in": oids,
		}
	}
	// 查询到数据
	err := entityList(ctx, m.col, filter, &data, opt)
	if err != nil {
		return nil, err
	}

	return data, nil
}

func (m *defaultDepartmentModel) ListToMap(ctx context.Context, req *domain.DepartmentListReq) (map[string]*Department,
	error) {
	list, err := m.List(ctx, req)
	if err != nil {
		return nil, err
	}

	res := make(map[string]*Department)
	for i, _ := range list {
		res[list[i].ID.Hex()] = list[i]
	}

	return res, nil

}

func (m *defaultDepartmentModel) AllToMap(ctx context.Context) (map[string]*Department,
	error) {
	var list []*Department
	err := entityList(ctx, m.col, bson.M{}, &list)
	if err != nil {
		return nil, err
	}

	res := make(map[string]*Department)
	for i, _ := range list {
		res[list[i].ID.Hex()] = list[i]
	}

	return res, nil
}
func (m *defaultDepartmentModel) All(ctx context.Context) ([]*Department,
	error) {
	var list []*Department
	err := entityList(ctx, m.col, bson.M{}, &list)
	if err != nil {
		return nil, err
	}

	return list, nil
}

func (m *defaultDepartmentModel) FindOne(ctx context.Context, id string) (*Department, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, ErrInvalidObjectId
	}

	var data Department
	err = m.col.FindOne(ctx, bson.M{"_id": oid}).Decode(&data)
	switch err {
	case nil:
		return &data, nil
	case mongo.ErrNoDocuments:
		return nil, ErrDepNotFound
	default:
		return nil, err
	}
}

func (m *defaultDepartmentModel) FindByName(ctx context.Context, name string) (*Department, error) {
	var data Department
	err := m.col.FindOne(ctx, bson.M{"name": name}).Decode(&data)
	switch err {
	case nil:
		return &data, nil
	case mongo.ErrNoDocuments:
		return nil, ErrDepNotFound
	default:
		return nil, err
	}
}

func (m *defaultDepartmentModel) Update(ctx context.Context, data *Department) error {
	data.UpdateAt = time.Now().Unix()
	_, err := m.col.UpdateOne(ctx, bson.M{"_id": data.ID}, bson.M{"$set": data})
	return err
}

func (m *defaultDepartmentModel) Delete(ctx context.Context, id string) error {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return ErrInvalidObjectId
	}
	_, err = m.col.DeleteOne(ctx, bson.M{"_id": oid})
	return err
}
