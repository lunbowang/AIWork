// Code generated by goctl. DO NOT EDIT.
package model

import (
	"ai/internal/domain"
	"context"
	"time"

	"go.mongodb.org/mongo-driver/mongo/options"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

type UserModel interface {
	Insert(ctx context.Context, data *User) error
	AllToMap(ctx context.Context) (map[string]*User, error)
	List(ctx context.Context, req *domain.UserListReq) ([]*User, int64, error)
	ListToMaps(ctx context.Context, req *domain.UserListReq) (map[string]*User, error)
	FindSysStemUser(ctx context.Context) (*User, error)
	FindByName(ctx context.Context, name string) (*User, error)
	FindOne(ctx context.Context, id string) (*User, error)
	Update(ctx context.Context, data *User) error
	UpdatePassword(ctx context.Context, id primitive.ObjectID, password string) error
	Delete(ctx context.Context, id string) error
}

type defaultUserModel struct {
	col *mongo.Collection
}

func NewUserModel(db *mongo.Database) UserModel {
	col := db.Collection("user")
	return &defaultUserModel{
		col: col,
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
		data.CreateAt = time.Now().Unix()
		data.UpdateAt = time.Now().Unix()
	}

	_, err := m.col.InsertOne(ctx, data)
	return err
}

func (m *defaultUserModel) AllToMap(ctx context.Context) (map[string]*User, error) {
	var data []*User
	// 查找到数据
	err := entityList(ctx, m.col, bson.M{}, &data)
	if err != nil {
		return nil, err
	}

	res := make(map[string]*User, len(data))
	for i, _ := range data {
		res[data[i].ID.Hex()] = data[i]
	}
	return res, nil
}

func (m *defaultUserModel) List(ctx context.Context, req *domain.UserListReq) ([]*User, int64, error) {
	var (
		data   []*User
		opt    = &options.FindOptions{}
		filter = bson.M{}
	)
	opt.Limit, opt.Skip = Pagination(req.Page, req.Count)

	if len(req.Name) > 0 {
		filter["name"] = req.Name
	}

	if len(req.Ids) > 0 {
		oids := make([]primitive.ObjectID, 0, len(req.Ids))
		for _, id := range req.Ids {
			if len(id) == 0 {
				continue
			}
			oid, err := primitive.ObjectIDFromHex(id)
			if err != nil {
				return nil, 0, ErrInvalidObjectId
			}
			oids = append(oids, oid)
		}
		filter["_id"] = bson.M{
			"$in": oids,
		}
	}

	// 查询到数据
	err := entityList(ctx, m.col, filter, &data, opt)
	if err != nil {
		return nil, 0, err
	}

	count, err := m.col.CountDocuments(ctx, filter)
	if err != nil {
		return nil, 0, err
	}
	return data, count, nil
}

func (m *defaultUserModel) ListToMaps(ctx context.Context, req *domain.UserListReq) (map[string]*User, error) {
	datas, _, err := m.List(ctx, req)
	if err != nil {
		return nil, err
	}
	res := make(map[string]*User, len(datas))
	for i, data := range datas {
		res[data.ID.Hex()] = datas[i]
	}
	return res, nil
}

func (m *defaultUserModel) FindOne(ctx context.Context, id string) (*User, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, ErrInvalidObjectId
	}

	var data User
	err = m.col.FindOne(ctx, bson.M{"_id": oid}).Decode(&data)
	switch err {
	case nil:
		return &data, nil
	case mongo.ErrNoDocuments:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindSysStemUser(ctx context.Context) (*User, error) {
	var data User
	err := m.col.FindOne(ctx, bson.M{"isSystem": true}).Decode(&data)
	switch err {
	case nil:
		return &data, nil
	case mongo.ErrNoDocuments:
		return nil, ErrNotUser
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Update(ctx context.Context, data *User) error {
	data.UpdateAt = time.Now().Unix()
	_, err := m.col.UpdateOne(ctx, bson.M{"_id": data.ID}, bson.M{"$set": data})
	return err
}

func (m *defaultUserModel) UpdatePassword(ctx context.Context, id primitive.ObjectID, password string) error {
	_, err := m.col.UpdateOne(ctx, bson.M{"_id": id}, bson.M{"$set": bson.M{
		"password":  password,
		"update_at": time.Now().Unix(),
	}})
	return err
}

func (m *defaultUserModel) Delete(ctx context.Context, id string) error {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return ErrInvalidObjectId
	}
	_, err = m.col.DeleteOne(ctx, bson.M{"_id": oid})
	return err
}

func (m *defaultUserModel) FindByName(ctx context.Context, name string) (*User, error) {
	var data User
	err := m.col.FindOne(ctx, bson.M{"name": name}).Decode(&data)
	switch err {
	case nil:
		return &data, nil
	case mongo.ErrNoDocuments:
		return nil, ErrNotUser
	default:
		return nil, err
	}
}
