// Code generated by goctl. DO NOT EDIT.
package model

import (
	"context"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

type UserTodoModel interface {
	Insert(ctx context.Context, data *UserTodo) error
	ListByTodoId(ctx context.Context, todoId string) ([]*UserTodo, error)
	FindOne(ctx context.Context, id string) (*UserTodo, error)
	Update(ctx context.Context, data *UserTodo) error
	Delete(ctx context.Context, id string) error
}

type defaultUserTodoModel struct {
	col *mongo.Collection
}

func NewUserTodoModel(db *mongo.Database) UserTodoModel {
	col := db.Collection("user_todo")
	return &defaultUserTodoModel{
		col: col,
	}
}

func (m *defaultUserTodoModel) Insert(ctx context.Context, data *UserTodo) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
		data.CreateAt = time.Now().Unix()
		data.UpdateAt = time.Now().Unix()
	}

	_, err := m.col.InsertOne(ctx, data)
	return err
}

func (m *defaultUserTodoModel) ListByTodoId(ctx context.Context, todoId string) ([]*UserTodo, error) {
	var data []*UserTodo
	// 查询到数据
	err := entityList(ctx, m.col, bson.M{"todo_id": todoId}, &data, nil)
	if err != nil {
		return nil, err
	}

	return data, err
}

func (m *defaultUserTodoModel) FindOne(ctx context.Context, id string) (*UserTodo, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, ErrInvalidObjectId
	}

	var data UserTodo
	err = m.col.FindOne(ctx, bson.M{"_id": oid}).Decode(&data)
	switch err {
	case nil:
		return &data, nil
	case mongo.ErrNoDocuments:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserTodoModel) Update(ctx context.Context, data *UserTodo) error {
	data.UpdateAt = time.Now().Unix()
	_, err := m.col.UpdateOne(ctx, bson.M{"_id": data.ID}, bson.M{"$set": data})
	return err
}

func (m *defaultUserTodoModel) Delete(ctx context.Context, id string) error {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return ErrInvalidObjectId
	}
	_, err = m.col.DeleteOne(ctx, bson.M{"_id": oid})
	return err
}
