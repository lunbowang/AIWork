// Code generated by goctl. DO NOT EDIT.
package model

import (
	"ai/internal/domain"
	"context"
	"time"

	"go.mongodb.org/mongo-driver/mongo/options"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

type TodoModel interface {
	Insert(ctx context.Context, data *Todo) error
	List(ctx context.Context, req *domain.TodoListReq) ([]*Todo, int64, error)
	FindOne(ctx context.Context, id string) (*Todo, error)
	Update(ctx context.Context, data *Todo) error
	UpdateFinished(ctx context.Context, data *Todo, isAllFinished bool) error
	UpdateRecords(ctx context.Context, data *Todo) error
	Delete(ctx context.Context, id string) error
}

type defaultTodoModel struct {
	col *mongo.Collection
}

func NewTodoModel(db *mongo.Database) TodoModel {
	col := db.Collection("todo")
	return &defaultTodoModel{
		col: col,
	}
}

func (m *defaultTodoModel) Insert(ctx context.Context, data *Todo) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
		data.CreateAt = time.Now().Unix()
		data.UpdateAt = time.Now().Unix()
	}

	_, err := m.col.InsertOne(ctx, data)
	return err
}

func (m *defaultTodoModel) List(ctx context.Context, req *domain.TodoListReq) ([]*Todo, int64, error) {
	var (
		data   []*Todo
		opt    = &options.FindOptions{}
		filter = bson.M{}
	)
	opt.Limit, opt.Skip = Pagination(req.Page, req.Count)
	if len(req.Id) > 0 {
		oid, err := primitive.ObjectIDFromHex(req.Id)
		if err != nil {
			return nil, 0, err
		}
		filter["_id"] = oid
		err = entityList(ctx, m.col, filter, &data, opt)
		if err != nil {
			return nil, 0, err
		}
		return data, int64(len(data)), nil
	}

	if len(req.UserId) > 0 {
		filter["creatorId"] = req.UserId
	}
	if req.StartTime > 0 {
		filter["create_at"] = bson.M{
			"$gte": req.StartTime,
		}
	}
	if req.EndTime > 0 {
		filter["create_at"] = bson.M{
			"$lte": req.EndTime,
		}
	}

	// 查询到数据
	err := entityList(ctx, m.col, filter, &data, opt)
	if err != nil {
		return nil, 0, err
	}

	count, err := m.col.CountDocuments(ctx, filter)
	if err != nil {
		return nil, 0, err
	}

	return data, count, nil
}

func (m *defaultTodoModel) FindOne(ctx context.Context, id string) (*Todo, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, ErrInvalidObjectId
	}

	var data Todo
	err = m.col.FindOne(ctx, bson.M{"_id": oid}).Decode(&data)
	switch err {
	case nil:
		return &data, nil
	case mongo.ErrNoDocuments:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTodoModel) Update(ctx context.Context, data *Todo) error {
	data.UpdateAt = time.Now().Unix()
	_, err := m.col.UpdateOne(ctx, bson.M{"_id": data.ID}, bson.M{"$set": data})
	return err
}

func (m *defaultTodoModel) UpdateFinished(ctx context.Context, data *Todo, isAllFinished bool) error {
	// 使用$set操作符包装所有要更新的字段
	update := bson.M{
		"$set": bson.M{
			"executes":  data.Executes,
			"update_at": time.Now().Unix(),
		},
	}

	if isAllFinished {
		// 向$set中添加todo_status字段
		update["$set"].(bson.M)["todo_status"] = TodoFinish
	}

	_, err := m.col.UpdateOne(ctx, bson.M{"_id": data.ID}, update)
	return err
}

func (m *defaultTodoModel) UpdateRecords(ctx context.Context, data *Todo) error {
	update := bson.M{
		"records":   data.Records,
		"update_at": time.Now().Unix(),
	}
	_, err := m.col.UpdateOne(ctx, bson.M{"_id": data.ID}, update)
	return err
}

func (m *defaultTodoModel) Delete(ctx context.Context, id string) error {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return ErrInvalidObjectId
	}
	_, err = m.col.DeleteOne(ctx, bson.M{"_id": oid})
	return err
}
