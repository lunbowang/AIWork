// Code generated by goctl. DO NOT EDIT.
package model

import (
	"ai/internal/domain"
	"context"
	"time"

	"go.mongodb.org/mongo-driver/mongo/options"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

type DepartmentUserModel interface {
	Insert(ctx context.Context, data *DepartmentUser) error
	Inserts(ctx context.Context, depId string, uids []string) error
	AllToMap(ctx context.Context) (map[string]*DepartmentUser, error)
	List(ctx context.Context, req *domain.DepartmentListReq) ([]*DepartmentUser, error)
	FindOne(ctx context.Context, id string) (*DepartmentUser, error)
	FindByUserId(ctx context.Context, uid string) (*DepartmentUser, error)
	Update(ctx context.Context, data *DepartmentUser) error
	Delete(ctx context.Context, id string) error
	DeleteByDepId(ctx context.Context, id string) error
}

type defaultDepartmentUserModel struct {
	col *mongo.Collection
}

func NewDepartmentUserModel(db *mongo.Database) DepartmentUserModel {
	col := db.Collection("department_user")
	return &defaultDepartmentUserModel{
		col: col,
	}
}

func (m *defaultDepartmentUserModel) Insert(ctx context.Context, data *DepartmentUser) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
		data.CreateAt = time.Now().Unix()
		data.UpdateAt = time.Now().Unix()
	}

	_, err := m.col.InsertOne(ctx, data)
	return err
}

func (m *defaultDepartmentUserModel) Inserts(ctx context.Context, depId string, uids []string) error {
	data := make([]interface{}, 0, len(uids))
	for _, uid := range uids {
		data = append(data, &DepartmentUser{
			DepId:  depId,
			UserId: uid,
		})
	}
	_, err := m.col.InsertMany(ctx, data)
	return err
}

func (m *defaultDepartmentUserModel) AllToMap(ctx context.Context) (map[string]*DepartmentUser, error) {
	var (
		data   []*DepartmentUser
		filter = bson.M{}
	)

	// 查询到数据
	err := entityList(ctx, m.col, filter, &data)
	if err != nil {
		return nil, err
	}

	res := make(map[string]*DepartmentUser)
	for i, _ := range data {
		res[data[i].DepId] = data[i]
	}

	return res, nil
}

func (m *defaultDepartmentUserModel) List(ctx context.Context, req *domain.DepartmentListReq) ([]*DepartmentUser, error) {
	var (
		data   []*DepartmentUser
		opt    = &options.FindOptions{}
		filter = bson.M{}
	)

	if len(req.DepId) > 0 {
		filter["dep_id"] = req.DepId
	}

	// 查询到数据
	err := entityList(ctx, m.col, filter, &data, opt)
	if err != nil {
		return nil, err
	}

	return data, nil
}

func (m *defaultDepartmentUserModel) FindOne(ctx context.Context, id string) (*DepartmentUser, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, ErrInvalidObjectId
	}

	var data DepartmentUser
	err = m.col.FindOne(ctx, bson.M{"_id": oid}).Decode(&data)
	switch err {
	case nil:
		return &data, nil
	case mongo.ErrNoDocuments:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDepartmentUserModel) FindByUserId(ctx context.Context, uid string) (*DepartmentUser, error) {
	var data DepartmentUser
	err := m.col.FindOne(ctx, bson.M{"userId": uid}).Decode(&data)
	switch err {
	case nil:
		return &data, nil
	case mongo.ErrNoDocuments:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDepartmentUserModel) Update(ctx context.Context, data *DepartmentUser) error {
	data.UpdateAt = time.Now().Unix()
	_, err := m.col.UpdateOne(ctx, bson.M{"_id": data.ID}, bson.M{"$set": data})
	return err
}

func (m *defaultDepartmentUserModel) Delete(ctx context.Context, id string) error {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return ErrInvalidObjectId
	}
	_, err = m.col.DeleteOne(ctx, bson.M{"_id": oid})
	return err
}
func (m *defaultDepartmentUserModel) DeleteByDepId(ctx context.Context, id string) error {
	_, err := m.col.DeleteMany(ctx, bson.M{"dep_id": id})
	return err
}
