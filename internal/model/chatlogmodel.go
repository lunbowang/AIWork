// Code generated by goctl. DO NOT EDIT.
package model

import (
	"context"
	"time"

	"go.mongodb.org/mongo-driver/mongo/options"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

type ChatlogModel interface {
	Insert(ctx context.Context, data *Chatlog) error
	FindOne(ctx context.Context, id string) (*Chatlog, error)
	Update(ctx context.Context, data *Chatlog) error
	Delete(ctx context.Context, id string) error
	ListBySendTime(ctx context.Context, cid string, sendStartTime, sendEndTime int64) ([]*Chatlog, error)
}

type defaultChatlogModel struct {
	col *mongo.Collection
}

func NewChatlogModel(db *mongo.Database) ChatlogModel {
	col := db.Collection("chatlog")
	return &defaultChatlogModel{
		col: col,
	}
}

func (m *defaultChatlogModel) Insert(ctx context.Context, data *Chatlog) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
		data.CreateAt = time.Now().Unix()
		data.UpdateAt = time.Now().Unix()
	}

	_, err := m.col.InsertOne(ctx, data)
	return err
}

func (m *defaultChatlogModel) FindOne(ctx context.Context, id string) (*Chatlog, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, ErrInvalidObjectId
	}

	var data Chatlog
	err = m.col.FindOne(ctx, bson.M{"_id": oid}).Decode(&data)
	switch err {
	case nil:
		return &data, nil
	case mongo.ErrNoDocuments:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultChatlogModel) Update(ctx context.Context, data *Chatlog) error {
	data.UpdateAt = time.Now().Unix()
	_, err := m.col.UpdateOne(ctx, bson.M{"_id": data.ID}, bson.M{"$set": data})
	return err
}

func (m *defaultChatlogModel) Delete(ctx context.Context, id string) error {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return ErrInvalidObjectId
	}
	_, err = m.col.DeleteOne(ctx, bson.M{"_id": oid})
	return err
}

func (m *defaultChatlogModel) ListBySendTime(ctx context.Context, cid string, sendStartTime, sendEndTime int64) ([]*Chatlog, error) {
	var data []*Chatlog

	opt := &options.FindOptions{
		Sort: bson.M{
			"sendTime": 1,
		},
	}

	filter := bson.M{
		"conversationId": cid,
	}

	if sendStartTime > 0 {
		filter["sendTime"] = bson.M{
			"&gte": sendStartTime,
		}
	}

	if sendEndTime > 0 {
		filter["sendTime"] = bson.M{
			"&lte": sendEndTime,
		}
	}

	err := entityList(ctx, m.col, filter, &data, opt)
	return data, err
}
